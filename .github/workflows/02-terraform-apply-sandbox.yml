name: "02 - terraform apply to: sandbox"

on:
  pull_request:
    types:
      - closed
    branches:
      - 'sandbox'

env:
  TF_CLOUD_ORGANIZATION: "deploymenttheory"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "terraform-jamfpro-sandbox"
  CONFIG_DIRECTORY: "workload/terraform/jamfpro"
  PIPELINE_DEBUG: true

permissions:
  pull-requests: write  # required to update PR
  contents: write       # required to create release and branch
  id-token: write 

jobs:
  terraform-apply:
    if: github.event.pull_request.merged == true
    name: "Terraform Apply to Sandbox"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        
      - name: Harden Runner
        uses: step-security/harden-runner@v2.9.1
        with:
          egress-policy: audit

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.1
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}

      - name: Create Terraform Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.1
        id: apply-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}

      - name: Terraform Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.3.1
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"

      - name: Update PR
        if: github.event.pull_request.merged == true
        uses: actions/github-script@v7
        env:
          TF_RUN_ID: "${{ steps.apply-run.outputs.run_id }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            async function fetchWithAuth(url) {
              try {
                const response = await fetch(url, {
                  headers: {
                    'Authorization': `Bearer ${{ secrets.TF_API_TOKEN }}`,
                    'Content-Type': 'application/vnd.api+json'
                  }
                });
                if (!response.ok) {
                  throw new Error(`HTTP error! status: ${response.status}`);
                }
                return await response.json();
              } catch (error) {
                console.error(`Error fetching ${url}:`, error);
                throw error;
              }
            }

            async function getTerraformRunDetails(runId) {
              try {
                console.log(`Fetching run data for run ID: ${runId}`);
                const runData = await fetchWithAuth(`https://app.terraform.io/api/v2/runs/${runId}`);
                console.log('Run API Response:', JSON.stringify(runData, null, 2));

                if (runData.data.relationships && runData.data.relationships.apply && runData.data.relationships.apply.data) {
                  const applyId = runData.data.relationships.apply.data.id;
                  console.log(`Fetching apply data for apply ID: ${applyId}`);
                  const applyData = await fetchWithAuth(`https://app.terraform.io/api/v2/applies/${applyId}`);
                  console.log('Apply API Response:', JSON.stringify(applyData, null, 2));

                  console.log(`Fetching apply logs for apply ID: ${applyId}`);
                  const applyLogs = await fetchWithAuth(`https://app.terraform.io/api/v2/applies/${applyId}/logs`);
                  console.log('Apply Logs:', applyLogs);

                  return { run: runData.data, apply: applyData.data, applyLogs: applyLogs };
                } else {
                  console.log('Apply relationship not found in run data');
                  return { run: runData.data, apply: null, applyLogs: null };
                }
              } catch (error) {
                console.error('Error fetching Terraform details:', error);
                return null;
              }
            }
            
            function extractApplySummary(applyLogs) {
              if (typeof applyLogs !== 'string') {
                console.error('Apply logs are not in the expected string format');
                return null;
              }
              const summaryRegex = /Apply complete! Resources: (\d+) added, (\d+) changed, (\d+) destroyed\./;
              const match = applyLogs.match(summaryRegex);
              if (match) {
                return {
                  added: parseInt(match[1]),
                  changed: parseInt(match[2]),
                  destroyed: parseInt(match[3])
                };
              }
              console.log('Apply summary not found in logs');
              return null;
            }

            console.log(`Starting to fetch details for run ID: ${process.env.TF_RUN_ID}`);
            const details = await getTerraformRunDetails(process.env.TF_RUN_ID);
            
            let output = `#### Terraform Apply Result ðŸš€\n\n`;
            
            if (details && details.run) {
              const run = details.run;
              output += `**Status:** ${run.attributes.status || 'N/A'}\n\n`;
              
              if (details.applyLogs) {
                const applySummary = extractApplySummary(details.applyLogs);
                if (applySummary) {
                  output += `**Resources Added:** ${applySummary.added}\n`;
                  output += `**Resources Changed:** ${applySummary.changed}\n`;
                  output += `**Resources Destroyed:** ${applySummary.destroyed}\n\n`;
                } else {
                  output += `**Apply summary not found in logs**\n\n`;
                }
              } else {
                output += `**Apply logs not available**\n\n`;
              }
              
              if (run.links && run.links.self) {
                const runUrl = `https://app.terraform.io${run.links.self}`;
                output += `[View Run Details](${runUrl})\n\n`;
              }
            } else {
              output += `Unable to fetch detailed run information. Check the action logs for more details.\n\n`;
            }
            
            output += `*Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            console.log('Comment body:', output);
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });